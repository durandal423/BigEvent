@Aspect
@Component
public class ArticleValidationAspect {

    private final Validator validator;

    @Autowired
    public ArticleValidationAspect(Validator validator) {
        this.validator = validator;
    }

    // 在带有 @ValidateArticle 注解的方法执行前进行校验
    @Before("@annotation(ValidateArticle)")
    public void validateArticle(JoinPoint joinPoint) {
        // 获取方法参数
        for (Object arg : joinPoint.getArgs()) {
            if (arg instanceof Article article) {
                // 校验 Article 对象
                validate(article);
            }
        }
    }

    // 校验逻辑：不需要反射
    private void validate(Article article) {
        TempArticleValidationObject tempObj =
            new TempArticleValidationObject(article.getTitle(), article.getContent());

        // 使用 Spring Validator 校验
        Set<ConstraintViolation<TempArticleValidationObject>> violations =
            validator.validate(tempObj);

        if (!violations.isEmpty()) {
            throw new ConstraintViolationException(violations);
        }
    }

    // 临时对象：定义校验规则
    private static class TempArticleValidationObject {

        @NotBlank(message = "标题不能为空")
        @Size(max = 100, message = "标题长度不能超过100个字符")
        private final String title;

        @Size(max = 500, message = "内容长度不能超过500个字符")
        private final String content;

        public TempArticleValidationObject(String title, String content) {
            this.title = title;
            this.content = content;
        }
    }
}
